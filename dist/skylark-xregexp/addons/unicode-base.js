/**
 * skylark-xregexp - A version of xregexp.js that ported to running on skylarkjs.
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-xregexp/
 * @license MIT
 */
define([],function(){return e=>{const n={},r=e._dec,t=e._hex,o=e._pad4;function a(e){return e.replace(/[- _]+/g,"").toLowerCase()}function s(e){const n=/^\\[xu](.+)/.exec(e);return n?r(n[1]):e.charCodeAt("\\"===e[0]?1:0)}function i(r){return n[r]["b!"]||(n[r]["b!"]=function(n){let r="",a=-1;return e.forEach(n,/(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/,e=>{const n=s(e[1]);n>a+1&&(r+=`\\u${o(t(a+1))}`,n>a+2&&(r+=`-\\u${o(t(n-1))}`)),a=s(e[2]||e[1])}),a<65535&&(r+=`\\u${o(t(a+1))}`,a<65534&&(r+="-\\uFFFF")),r}(n[r].bmp))}function c(e,r){const t=r?"a!":"a=";return n[e][t]||(n[e][t]=function(e,r){const t=n[e];let o="";return t.bmp&&!t.isBmpLast&&(o=`[${t.bmp}]${t.astral?"|":""}`),t.astral&&(o+=t.astral),t.isBmpLast&&t.bmp&&(o+=`${t.astral?"|":""}[${t.bmp}]`),r?`(?:(?!${o})(?:[\ud800-\udbff][\udc00-\udfff]|[\0-ï¿¿]))`:`(?:${o})`}(e,r))}e.addToken(/\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/,(e,r,t)=>{let o="P"===e[1]||!!e[2];const s=t.includes("A");let u=a(e[4]||e[3]),f=n[u];if("P"===e[1]&&e[2])throw new SyntaxError("Invalid double negation "+e[0]);if(!n.hasOwnProperty(u))throw new SyntaxError("Unknown Unicode token "+e[0]);if(f.inverseOf){if(u=a(f.inverseOf),!n.hasOwnProperty(u))throw new ReferenceError(`${"Unicode token missing data "+e[0]} -> ${f.inverseOf}`);f=n[u],o=!o}if(!f.bmp&&!s)throw new SyntaxError("Astral mode required for Unicode token "+e[0]);if(s){if("class"===r)throw new SyntaxError("Astral mode does not support Unicode tokens within character classes");return c(u,o)}return"class"===r?o?i(u):f.bmp:`${(o?"[^":"[")+f.bmp}]`},{scope:"all",optionalFlags:"A",leadChar:"\\"}),e.addUnicodeData=(r=>{for(const e of r){if(!e.name)throw new Error("Unicode token requires name");if(!(e.inverseOf||e.bmp||e.astral))throw new Error("Unicode token has no character data "+e.name);n[a(e.name)]=e,e.alias&&(n[a(e.alias)]=e)}e.cache.flush("patterns")}),e._getUnicodeProperty=(e=>{const r=a(e);return n[r]})}});
//# sourceMappingURL=../sourcemaps/addons/unicode-base.js.map
